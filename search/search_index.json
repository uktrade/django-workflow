{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Django Workflow Engine","text":"<p><code>django-workflow-engine</code> is a lightweight and reusable workflow engine for Django applications. It enables you to better organise the business logic for collaborating users.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install django-workflow-engine\n</code></pre>"},{"location":"#getting-started","title":"Getting started","text":"<p>Add the application to your Django settings <code>INSTALLED_APPS</code> list:</p> <pre><code>INSTALLED_APPS = [\n...\n\"django_workflow_engine\",\n]\n</code></pre> <p>Add the built-in <code>django-workflow-engine</code> view urls to your project's <code>urls.py</code> as follows:</p> <pre><code>from django_workflow_engine import workflow_urls\n...\nurlpatterns = [\npath(\"workflow/\", workflow_urls()),\n...\n]\n</code></pre> <p>This will utilise all <code>django-workflow-engine</code> built-in view classes. Default views are:</p> <ul> <li><code>list_view=FlowListView</code> List of workflow instances view.</li> <li><code>view=FlowView</code> Workflow instance view.</li> <li><code>create_view=FlowCreateView</code> Create workflow view.</li> <li><code>continue_view=FlowContinueView</code> Workflow continuation view.</li> <li><code>diagram_view=FlowDiagramView</code> Workflow diagram view.</li> </ul> <p>You can override any the built-in view classes with your own, for example to provide your own view classes for flow list and flow view:</p> <pre><code>urlpatterns = [\npath(\"workflow/\",\nworkflow_urls(\nlist_view=MyFlowListView,\nview=MyFlowView,\n),\n),\n]\n</code></pre>"},{"location":"#building-your-first-workflow","title":"Building your first workflow","text":"<p>Create a <code>workflows.py</code> in your project and add your uniquely named workflows.</p> <pre><code>from django_workflow_engine import Step, Workflow\nonboard_contractor = Workflow(\nname=\"onboard_contractor\",\nsteps=[\nStep(...),\nStep(...),\nStep(...),\n],\n)\nonboard_perm = Workflow(\nname=\"onboard_perm\",\nsteps=[\n...\n],\n)\n</code></pre> <p>Add you workflows to your Django settings as follows:</p> <pre><code>DJANGO_WORKFLOWS = {\n\"onboard_contractor\": \"your_app.workflows.onboard_contractor\",\n\"onboard_perm\": \"your_app.workflows.onboard_perm\",\n}\n</code></pre> <p>Each entry needs to be a valid module path where the final component is the name of your workflow class.</p> <p>Finally, run the <code>django-workflow-engine</code> migrations:</p> <pre><code>$ ./manage.py migrate\n</code></pre>"},{"location":"publishing/","title":"Pushing to PyPI","text":"<ul> <li>PyPI Package</li> <li>Test PyPI Package</li> </ul>"},{"location":"publishing/#commands","title":"Commands","text":"<ul> <li>Running <code>make build-package</code> will build the package into the <code>dist/</code> directory.</li> <li>Running <code>make push-pypi-test</code> will push the built package to Test PyPI.</li> <li>Running <code>make push-pypi</code> will push the built package to PyPI.</li> </ul>"},{"location":"publishing/#setting-up-poetry-for-pushing-to-pypi","title":"Setting up poetry for pushing to PyPI","text":"<p>First you will need to add the test pypy repository to your poetry config:</p> <pre><code>poetry config repositories.test-pypi https://test.pypi.org/legacy/\n</code></pre> <p>Then go to https://test.pypi.org/manage/account/token/ and generate a token.</p> <p>Then add it to your poetry config:</p> <pre><code>poetry config pypi-token.test-pypi XXXXXXXX\n</code></pre> <p>Then you also need to go to https://pypi.org/manage/account/token/ to generate a token for the real PyPI.</p> <p>Then add it to your poetry config:</p> <pre><code>poetry config pypi-token.pypi XXXXXXXX\n</code></pre> <p>Now the make commands should work as expected.</p>"},{"location":"structure/","title":"Model structure","text":"<pre><code>classDiagram\n    TaskRecord &lt;|-- TaskLog\n    TaskRecord &lt;|-- Target\n    Flow &lt;|-- TaskRecord\n\n    class Flow{\n        String workflow_name\n        String flow_name\n        Datetime started\n        Boolean running\n        Datetime finished\n        JSON flow_info\n    }\n    class TaskLog{\n        String message\n        Datetime logged_at\n    }\n\n    class Target{\n        String target_string\n    }\n\n    class TaskRecord{\n        UUID uuid\n        Datetime started_at\n        Datetime executed_at\n        String step_id\n        String task_name\n        JSON task_info\n        Boolean done\n    }</code></pre>"},{"location":"structure/#how-are-the-models-used","title":"How are the models used?","text":""},{"location":"structure/#flow","title":"Flow","text":"<p>The Flow model is used to store information about a workflow. You will need to create a new Flow object for each workflow you want to run.</p> <p>When executed, the Flow object will look at the workflow_name and follow the steps outlined on that workflow.</p>"},{"location":"structure/#taskrecord","title":"TaskRecord","text":"<p>The TaskRecord model is used to store information about workflow steps they are created when a step is executed.</p> <p>Once the Step has finished executing, the TaskRecord is updated with the results of the execution.</p> <p>Currently, TaskRecord objects are created for each execution, meaning that if a step doesn't complete successfully, and is executed again, a new TaskRecord is created.</p>"},{"location":"structure/#target","title":"Target","text":"<p>After a step has been executed a Targets are created that will determine which steps need to be executed next.</p>"},{"location":"structure/#tasklog","title":"TaskLog","text":"<p>TaskLogs are currently not used by Django Workflow Engine, but they can be useful for adding messages to TaskRecords.</p>"}]}